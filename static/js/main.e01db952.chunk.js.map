{"version":3,"sources":["pages/About.react.js","posts/renderers/Torchscript.react.js","posts/PostMap.react.js","posts/PostRenderer.react.js","posts/PostRouter.react.js","App.react.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","className","role","aria-label","href","Torchscript","PostMap","Map","title","blurb","renderer","PostRenderer","props","_props$info","info","PostRouter","post","has","PostRenderer_react","get","CardColumns","Object","toConsumableArray","keys","map","key","_PostMap$get","Card","Body","Title","react_router_dom","to","concat","Text","App","Navbar","bg","expand","Toggle","aria-controls","Collapse","Nav","Link","react_router","exact","path","component","_ref","url","match","_ref2","params","PostRouter_react","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_react","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e01db952.chunk.js","sourcesContent":["import React, { FunctionalComponent } from 'react';\nimport 'css/pages/About.scss';\n\nconst About: FunctionalComponent = () => (\n  <div className=\"emphasis all\">\n    <h1 className=\"padded bottom\">\n      Hi!{' '}\n      <span role=\"img\" aria-label=\"waving hand\">ðŸ‘‹</span>\n    </h1>\n    <h2 className=\"padded bottom\">\n      My name is Ben.\n    </h2>\n    <h4 className=\"padded bottom contents\">\n      I'm a software engineer at Facebook, where I work on natural language\n      processing.\n    </h4>\n    <h4 className=\"padded bottom contents\">\n      I like trying to explain things in fun and informative ways. I used to fairly\n      active on{' '}\n      <a href=\"https://github.com/codekansas\">Github</a>\n      . If you're interested in connecting, shoot me an{' '}\n      <a href=\"mailto:ben@bolte.cc\">email</a>.\n    </h4>\n    <h4 className=\"padded bottom contents\">\n      Besides programming, I like playing soccer and reading books. I'm currently\n      trying to get better at{' '}\n      <a href=\"https://www.chess.com/member/codekansas\">chess</a>\n      , but it's slow going.\n    </h4>\n  </div>\n);\n\nexport default About;\n","import React, { FunctionalComponent } from 'react';\n\nconst Torchscript: FunctionalComponent = () => (\n  <div>\n    I will work on this blog post later.\n  </div>\n);\n\nexport default Torchscript;\n","import React from 'react';\nimport Torchscript from 'posts/renderers/Torchscript.react';\n\nexport interface PostInfo {\n  title: string,\n  blurb: React.Node,\n  renderer: React.Node\n}\n\nconst PostMap: {\n  [string]: PostInfo\n} = new Map([\n  [\n    'torchscript', {\n      title: 'Torchscript ðŸ”¥ verses Caffe2 â˜•',\n      blurb: (\n        <span>\n          Facebook is migrating a lot of our machine learning inference infrastructure over\n          to Torchscript, so I figured I should write an informational blog post about the\n          technical internals of each, as I understand them.\n        </span>\n      ),\n      renderer: Torchscript,\n    },\n  ],\n]);\n\nexport default PostMap;\n","import React, { FunctionalComponent } from 'react';\nimport { PostInfo } from 'posts/PostMap.react';\nimport 'css/pages/Post.scss';\n\ninterface Props {\n  info: PostInfo,\n}\n\nconst PostRenderer: FunctionalComponent<Props> = (props: Props) => {\n  const {\n    info: {\n      title, blurb, renderer,\n    },\n  } = props;\n  return (\n    <div className=\"emphasis all\">\n      <h1 className=\"padded bottom text-center title\">{title}</h1>\n      <h4 className=\"padded bottom text-center blurb\">{blurb}</h4>\n      {renderer()}\n    </div>\n  );\n};\n\nexport default PostRenderer;\n","import React, { FunctionalComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { CardColumns, Card } from 'react-bootstrap';\nimport PostMap from 'posts/PostMap.react';\nimport PostRenderer from 'posts/PostRenderer.react';\n\ninterface Props {\n  post: ?string\n}\n\nconst PostRouter: FunctionalComponent<Props> = (props: Props) => {\n  const { post } = props;\n  if (post == null || !PostMap.has(post)) {\n    return (\n      <div className=\"emphasis all\">\n        <h1 className=\"padded bottom\">\n          Posts\n        </h1>\n        <CardColumns>\n          {\n            [...PostMap.keys()].map((key) => {\n              const { title, blurb } = PostMap.get(key);\n              return (\n                <Card className=\"text-center p-3\" key={key}>\n                  <Card.Body>\n                    <Card.Title><Link to={`/posts/${key}`}>{title}</Link></Card.Title>\n                    <Card.Text>{blurb}</Card.Text>\n                  </Card.Body>\n                </Card>\n              );\n            })\n          }\n        </CardColumns>\n      </div>\n    );\n  }\n  return <PostRenderer info={PostMap.get(post)} />;\n};\n\nexport default PostRouter;\n","import React, { FunctionalComponent } from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { HashRouter, Route } from 'react-router-dom';\nimport 'css/App.scss';\nimport About from 'pages/About.react';\nimport PostRouter from 'posts/PostRouter.react';\n\nconst App: FunctionalComponent = () => (\n  <div className=\"App\">\n    <header>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse>\n          <Nav>\n            <Nav.Link href=\"#/\">Home</Nav.Link>\n            <Nav.Link href=\"#posts\">Posts</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </header>\n    <HashRouter>\n      <Route exact path=\"/\" component={About} />\n      <Route\n        path=\"/posts\"\n        component={({\n          match: {\n            url,\n          },\n        }) => (\n          <HashRouter>\n            <Route exact path={`${url}`} component={PostRouter} />\n            <Route\n              path={`${url}/:post`}\n              component={({\n                match: {\n                  params: {\n                    post,\n                  },\n                },\n              }) => <PostRouter post={post} />}\n            />\n          </HashRouter>\n        )}\n      />\n    </HashRouter>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.react';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}