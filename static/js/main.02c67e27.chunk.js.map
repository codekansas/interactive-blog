{"version":3,"sources":["pages/About.react.js","components/posts/neuron_models/Model.react.js","components/posts/neuron_models/FitzHughNagumo.react.js","components/posts/neuron_models/Izhikevich.react.js","components/posts/neuron_models/HodgkinHuxley.react.js","components/posts/neuron_models/LeakyIntegrateAndFire.react.js","components/posts/neuron_models/MorrisLecar.react.js","posts/renderers/NeuronModels.react.js","posts/renderers/Torchscript.react.js","posts/PostMap.react.js","posts/PostRenderer.react.js","posts/PostRouter.react.js","App.react.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","className","role","aria-label","href","ModelRenderer","state","nearestValue","_this$props","this","props","params","model","dt","totalTime","targetParamKey","steps","initialParams","Map","map","p","key","value","Object","toConsumableArray","Array","keys","reduce","r","i","newParams","results","push","x","y","get","_this2","_this$props2","height","ylabel","data","runModel","es","onMouseLeave","setState","title","strokeStyle","onNearestX","v","values","titleFormat","concat","Math","round","itemsFormat","j","Component","Model","_this3","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","event","preventDefault","stopPropagation","form","currentTarget","param","name","unit","stepValue","parseFloat","out_var","defaultTargetParamKey","_this$props3","_this$state","_params$find","find","e","lib_default","Model_react_ModelRenderer","Form","onSubmit","Row","Group","controlId","as","Col","md","Label","InputGroup","Control","type","placeholder","defaultValue","step","required","Append","Text","Button","renderModel","defaultProps","ModelParams","modelStep","inputs","t","tauM","b","w","vIn","vMem","vMemNew","wNew","set","FitzHughNagumo","Model_react","step_value","c","d","vThresh","u","uNew","Izhikevich","eNa","eK","eL","gNa","gK","gL","m","n","h","dv","vOffsetM","alphaM","exp","alphaH","vOffsetN","alphaN","dm","dh","dn","HodgkinHuxley","vReset","vMemReset","LeakyIntegrateAndFire","stepVallue","cap","eCa","gCa","phi","v1","v2","v3","v4","tanh","cosh","MorrisLecar","NeuronModelSection","description","NeuronModels","NeuronModels_react_NeuronModelSection","Fragment","LeakyIntegrateAndFire_react","Izhikevich_react","HodgkinHuxley_react","FitzHughNagumo_react","MorrisLecar_react","Torchscript","PostMap","blurb","renderer","PostRenderer","_props$info","info","PostRouter","post","has","PostRenderer_react","CardColumns","_PostMap$get","Card","Body","Title","react_router_dom","to","App","Navbar","bg","expand","Toggle","aria-controls","Collapse","Nav","Link","react_router","exact","path","component","_ref","url","match","_ref2","PostRouter_react","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_react","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.02c67e27.chunk.js","sourcesContent":["import React, { FunctionalComponent } from 'react';\nimport 'css/pages/About.scss';\n\nconst About: FunctionalComponent = () => (\n  <div className=\"emphasis all\">\n    <h1 className=\"padded bottom\">\n      Hi!{' '}\n      <span role=\"img\" aria-label=\"waving hand\">👋</span>\n    </h1>\n    <h2 className=\"padded bottom\">\n      My name is Ben.\n    </h2>\n    <h4 className=\"padded bottom contents\">\n      I'm a software engineer at Facebook, where I work on natural language\n      processing.\n    </h4>\n    <h4 className=\"padded bottom contents\">\n      I like trying to explain things in fun and informative ways. I used to fairly\n      active on{' '}\n      <a href=\"https://github.com/codekansas\">Github</a>\n      . If you're interested in connecting, shoot me an{' '}\n      <a href=\"mailto:ben@bolte.cc\">email</a>.\n    </h4>\n    <h4 className=\"padded bottom contents\">\n      Besides programming, I like playing soccer and reading books. I'm currently\n      trying to get better at{' '}\n      <a href=\"https://www.chess.com/member/codekansas\">chess</a>\n      , but it's slow going.\n    </h4>\n  </div>\n);\n\nexport default About;\n","import React, { Component } from 'react';\nimport {\n  Button, Form, InputGroup, Col,\n} from 'react-bootstrap';\nimport 'react-vis/dist/style.css';\nimport {\n  XAxis, YAxis, LineSeries, FlexibleWidthXYPlot, Crosshair,\n} from 'react-vis';\nimport LazyLoad from 'react-lazyload';\n\nexport interface Param {\n  key: string,\n  name: string,\n  unit: ?string,\n  value: number,\n  stepValue: number,\n}\n\ninterface Props {\n  params: Array<Param>,\n  defaultTargetParamKey: string,\n  model: (Map<string, number>, number) => Map<string, number>,\n}\n\ninterface State {\n  params: Array<Param>,\n  targetParamKey: string,\n}\n\ninterface RendererProps {\n  params: Array<Param>,\n  targetParamKey: string,\n  model: (Map<string, number>, number) => Map<string, number>,\n  ylabel: string,\n  dt: number,\n  totalTime: number,\n  height: number,\n}\n\ninterface RendererState {\n  nearestValue: ?any,\n}\n\nclass ModelRenderer extends Component<RendererProps, RendererState> {\n  state = {\n    nearestValue: null,\n  }\n\n  runModel(): Array<number> {\n    const {\n      params, model, dt, totalTime, targetParamKey,\n    } = this.props;\n    const steps = totalTime / dt;\n    const initialParams = new Map(params.map(\n      p => [p.key, p.value],\n    ));\n    const modelResults = [...Array(steps).keys()].reduce(\n      (r, i) => {\n        const newParams = model(r.params, dt, i * dt);\n        r.results.push({\n          x: i * dt,\n          y: newParams.get(targetParamKey),\n        });\n        return {\n          params: newParams,\n          results: r.results,\n        };\n      },\n      {\n        params: initialParams,\n        results: [],\n      },\n    );\n    const { results } = modelResults;\n    return results;\n  }\n\n  render() {\n    const {\n      params, model, height, ylabel,\n    } = this.props;\n    const data = this.runModel(params, model);\n    const { nearestValue } = this.state;\n    return (\n      <FlexibleWidthXYPlot\n        height={height}\n        onMouseLeave={() => this.setState({ nearestValue: null })}\n      >\n        <XAxis title=\"Time (ms)\" />\n        <YAxis title={ylabel} />\n        <LineSeries\n          strokeStyle=\"dashed\"\n          data={data}\n          onNearestX={v => this.setState({ nearestValue: v })}\n        />\n        {nearestValue == null\n          ? null\n          : (\n            <Crosshair\n              values={[nearestValue]}\n              titleFormat={i => ({\n                title: ylabel,\n                value: `${Math.round(i[0].y * 10000) / 10000}`,\n              })}\n              itemsFormat={i => i.map(j => ({\n                title: 'Time (ms)',\n                value: `${Math.round(j.x * 10000) / 10000}`,\n              }))}\n            />\n          )}\n      </FlexibleWidthXYPlot>\n    );\n  }\n}\n\nclass Model extends Component<Props, State> {\n  static defaultProps = {\n    height: 300,\n  }\n\n  constructor(props) {\n    super(props);\n    const { params, defaultTargetParamKey } = props;\n    this.state = {\n      params,\n      targetParamKey: defaultTargetParamKey,\n    };\n  }\n\n  handleSubmit = (event) => {\n    const { params } = this.props;\n    event.preventDefault();\n    event.stopPropagation();\n    const form = event.currentTarget;\n    const newParams = params.map((param) => {\n      const {\n        key, name, unit, stepValue,\n      } = param;\n      const value = parseFloat(form[key].value);\n      return {\n        key, name, unit, value, stepValue,\n      };\n    });\n    const targetParamKey = form.out_var.value;\n    this.setState({\n      params: newParams,\n      targetParamKey,\n    });\n  }\n\n  renderModel(): React.Node {\n    const { model, height } = this.props;\n    const { params, targetParamKey } = this.state;\n    const { name, unit } = params.find(e => e.key === targetParamKey);\n    const ylabel = unit == null ? name : `${name} (${unit})`;\n    const columnSize = 4;\n    return (\n      <div>\n        <LazyLoad height={height}>\n          <ModelRenderer\n            params={params}\n            targetParamKey={targetParamKey}\n            model={model}\n            ylabel={ylabel}\n            dt={0.04}\n            totalTime={250}\n            height={height}\n          />\n        </LazyLoad>\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Row>\n            {params.map(param => (\n              <Form.Group key={param.key} controlId={param.key} as={Col} md={columnSize}>\n                <Form.Label>{param.name}</Form.Label>\n                <InputGroup>\n                  <Form.Control\n                    type=\"number\"\n                    placeholder={param.name}\n                    defaultValue={param.value}\n                    step={param.stepValue}\n                    required\n                  />\n                  {param.unit == null\n                    ? null\n                    : (\n                      <InputGroup.Append>\n                        <InputGroup.Text>{param.unit}</InputGroup.Text>\n                      </InputGroup.Append>\n                    )}\n                </InputGroup>\n              </Form.Group>\n            ))}\n            <Form.Group controlId=\"out_var\" as={Col} md={columnSize}>\n              <Form.Label>Output Variable</Form.Label>\n              <Form.Control\n                as=\"select\"\n                defaultValue={targetParamKey}\n                required\n              >\n                {params.map(param => (\n                  <option value={param.key} key={param.key}>{param.name}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group key=\"submit\" as={Col} md={columnSize}>\n              <Form.Label>Update Params</Form.Label>\n              <InputGroup>\n                <Button type=\"submit\">Update</Button>\n              </InputGroup>\n            </Form.Group>\n          </Form.Row>\n        </Form>\n      </div>\n    );\n  }\n\n  render() {\n    return this.renderModel();\n  }\n}\n\nexport default Model;\n","import React, { FunctionalComponent } from 'react';\nimport Model, { Param } from './Model.react';\n\nconst ModelParams: Array<Param> = [\n  {\n    key: 'tau_m',\n    name: 'Time Constant',\n    unit: 'ms',\n    value: 12.5,\n    stepValue: 0.5,\n  },\n  {\n    key: 'a',\n    name: 'a Variable',\n    unit: null,\n    value: 0.7,\n    stepValue: 0.01,\n  },\n  {\n    key: 'b',\n    name: 'b Variable',\n    unit: null,\n    value: 0.8,\n    stepValue: 0.01,\n  },\n  {\n    key: 'w',\n    name: 'w Variable',\n    unit: null,\n    value: 0,\n    stepValue: 0.01,\n  },\n  {\n    key: 'v_mem',\n    name: 'Membrane Voltage',\n    unit: 'mV',\n    value: 0,\n    stepValue: 1,\n  },\n  {\n    key: 'v_in',\n    name: 'Input Voltage',\n    unit: 'mV',\n    value: 0,\n    stepValue: 1,\n  },\n  {\n    key: 'v_in_level',\n    name: 'Input Voltage Step',\n    unit: 'mV',\n    value: 500,\n    stepValue: 1,\n  },\n  {\n    key: 'start_time',\n    name: 'Stimulation Start Time',\n    unit: 'ms',\n    value: 20,\n    stepValue: 1,\n  },\n];\n\nconst modelStep = (\n  inputs: Map<string, number>,\n  dt: number,\n  t: number,\n): Map<string, number> => {\n  const tauM = inputs.get('tau_m');\n  const a = inputs.get('a');\n  const b = inputs.get('b');\n  const w = inputs.get('w');\n  const vIn = inputs.get('v_in') / 1000.0;\n  const vMem = inputs.get('v_mem') / 1000.0;\n\n  const dv = (vMem - (vMem * vMem * vMem) / 3 - w + vIn) * dt;\n  const dw = (vMem + a - (b * w)) * dt;\n  const vMemNew = vMem + dv;\n  const wNew = w + (dw / tauM);\n\n  if (t >= inputs.get('start_time')) {\n    inputs.set('v_in', inputs.get('v_in_level'));\n  }\n\n  inputs.set('v_mem', vMemNew * 1000.0);\n  inputs.set('w', wNew);\n\n  return inputs;\n};\n\nconst FitzHughNagumo: FunctionalComponent = () => (\n  <Model\n    params={ModelParams}\n    defaultTargetParamKey=\"v_mem\"\n    model={modelStep}\n  />\n);\n\nexport default FitzHughNagumo;\n","import React, { FunctionalComponent } from 'react';\nimport Model, { Param } from './Model.react';\n\nconst ModelParams: Array<Param> = [\n  {\n    key: 'a',\n    name: 'a Variable',\n    unit: null,\n    value: 0.02,\n    stepValue: 0.001,\n  },\n  {\n    key: 'b',\n    name: 'b Variable',\n    unit: null,\n    value: 0.2,\n    stepValue: 0.01,\n  },\n  {\n    key: 'c',\n    name: 'c Variable',\n    unit: null,\n    value: -50,\n    stepValue: 1,\n  },\n  {\n    key: 'd',\n    name: 'd Variable',\n    unit: null,\n    value: 2,\n    stepValue: 0.01,\n  },\n  {\n    key: 'v_in',\n    name: 'Input Voltage',\n    unit: 'mV',\n    value: 0,\n    stepValue: 1,\n  },\n  {\n    key: 'v_in_level',\n    name: 'Input Voltage Step',\n    unit: 'mV',\n    value: 20,\n    step_value: 1,\n  },\n  {\n    key: 'v_thresh',\n    name: 'Threshold Voltage',\n    unit: 'mV',\n    value: 30,\n    stepValue: 1,\n  },\n  {\n    key: 'v_mem',\n    name: 'Membrane Voltage',\n    unit: 'mV',\n    value: -60,\n    stepValue: 1,\n  },\n  {\n    key: 'u',\n    name: 'u Variable',\n    unit: null,\n    value: 0.5,\n    stepValue: 0.01,\n  },\n  {\n    key: 'start_time',\n    name: 'Stimulation Start Time',\n    unit: 'ms',\n    value: 20,\n    stepValue: 1,\n  },\n];\n\nconst modelStep = (\n  inputs: Map<string, number>,\n  dt: number,\n  t: number,\n): Map<string, number> => {\n  const a = inputs.get('a');\n  const b = inputs.get('b');\n  const c = inputs.get('c');\n  const d = inputs.get('d');\n  const vThresh = inputs.get('v_thresh');\n  const vIn = inputs.get('v_in');\n  const vMem = inputs.get('v_mem');\n  const u = inputs.get('u');\n\n  const dv = (0.04 * vMem * vMem + 5 * vMem + 140 - u + vIn) * dt;\n  const du = (a * (b * vMem - u)) * dt;\n\n  const vMemNew = vMem + dv;\n  const uNew = u + du;\n\n  if (t >= inputs.get('start_time')) {\n    inputs.set('v_in', inputs.get('v_in_level'));\n  }\n\n  if (vMemNew >= vThresh) {\n    inputs.set('v_mem', c);\n    inputs.set('u', uNew + d);\n  } else {\n    inputs.set('v_mem', vMemNew);\n    inputs.set('u', uNew);\n  }\n\n  return inputs;\n};\n\nconst Izhikevich: FunctionalComponent = () => (\n  <Model\n    params={ModelParams}\n    defaultTargetParamKey=\"v_mem\"\n    model={modelStep}\n  />\n);\n\nexport default Izhikevich;\n","import React, { FunctionalComponent } from 'react';\nimport Model, { Param } from './Model.react';\n\nconst ModelParams: Array<Param> = [\n  {\n    key: 'e_na',\n    name: 'Sodium Reversal Potential',\n    unit: 'mV',\n    value: 50,\n    stepValue: 1,\n  },\n  {\n    key: 'e_k',\n    name: 'Potassium Reversal Potential',\n    unit: 'mV',\n    value: -77,\n    stepValue: 1,\n  },\n  {\n    key: 'e_l',\n    name: 'Leak Potential',\n    unit: 'mV',\n    value: -54,\n    stepValue: 1,\n  },\n  {\n    key: 'g_na',\n    name: 'Sodium Conductance',\n    unit: 'mS / cm * cm',\n    value: 120,\n    stepValue: 1,\n  },\n  {\n    key: 'g_k',\n    name: 'Potassium Conductance',\n    unit: 'mS / cm * cm',\n    value: 36,\n    stepValue: 1,\n  },\n  {\n    key: 'g_l',\n    name: 'Leak Conductance',\n    unit: 'mS / cm * cm',\n    value: 0.3,\n    stepValue: 0.01,\n  },\n  {\n    key: 'v_in',\n    name: 'Input Voltage',\n    unit: 'mV',\n    value: 0,\n    stepValue: 1,\n  },\n  {\n    key: 'v_in_level',\n    name: 'Input Voltage Step',\n    unit: 'mV',\n    value: 20,\n    stepValue: 1,\n  },\n  {\n    key: 'v_mem',\n    name: 'Membrane Voltage',\n    unit: 'mV',\n    value: -65,\n    stepValue: 1,\n  },\n  {\n    key: 'm',\n    name: 'm Variable',\n    unit: null,\n    value: 0.05,\n    stepValue: 0.001,\n  },\n  {\n    key: 'h',\n    name: 'h Variable',\n    unit: null,\n    value: 0.6,\n    stepValue: 0.001,\n  },\n  {\n    key: 'n',\n    name: 'n Variable',\n    unit: null,\n    value: 0.32,\n    stepValue: 0.001,\n  },\n  {\n    key: 'start_time',\n    name: 'Stimulation Start Time',\n    unit: 'ms',\n    value: 20,\n    stepValue: 1,\n  },\n];\n\nconst modelStep = (\n  inputs: Map<string, number>,\n  dt: number,\n  t: number,\n): Map<string, number> => {\n  const eNa = inputs.get('e_na');\n  const eK = inputs.get('e_k');\n  const eL = inputs.get('e_l');\n  const gNa = inputs.get('g_na');\n  const gK = inputs.get('g_k');\n  const gL = inputs.get('g_l');\n  const vIn = inputs.get('v_in');\n  const vMem = inputs.get('v_mem');\n  const m = inputs.get('m');\n  const n = inputs.get('n');\n  const h = inputs.get('h');\n\n  const iNa = gNa * m * m * m * h * (vMem - eNa);\n  const iK = gK * n * n * n * n * (vMem - eK);\n  const iL = gL * (vMem - eL);\n  const dv = (vIn - iNa - iK - iL) * dt;\n\n  const vOffsetM = vMem + 40;\n  const alphaM = 0.1 * vOffsetM / (1.0 - Math.exp(-vOffsetM / 10));\n  const alphaH = 0.07 * Math.exp(-(vMem + 65) / 20);\n  const vOffsetN = vMem + 55;\n  const alphaN = 0.01 * vOffsetN / (1.0 - Math.exp(-vOffsetN / 10));\n\n  const betaM = 4.0 * Math.exp(-(vMem + 65) / 18);\n  const betaH = 1.0 / (1.0 + Math.exp(-(vMem + 35) / 10));\n  const betaN = 0.125 * Math.exp(-(vMem + 65) / 80);\n\n  const dm = (alphaM * (1.0 - m) - betaM * m) * dt;\n  const dh = (alphaH * (1.0 - h) - betaH * h) * dt;\n  const dn = (alphaN * (1.0 - n) - betaN * n) * dt;\n\n  inputs.set('m', m + dm);\n  inputs.set('h', h + dh);\n  inputs.set('n', n + dn);\n  inputs.set('v_mem', vMem + dv);\n\n  if (t >= inputs.get('start_time')) {\n    inputs.set('v_in', inputs.get('v_in_level'));\n  }\n\n  return inputs;\n};\n\nconst HodgkinHuxley: FunctionalComponent = () => (\n  <Model\n    params={ModelParams}\n    defaultTargetParamKey=\"v_mem\"\n    model={modelStep}\n  />\n);\n\nexport default HodgkinHuxley;\n","import React, { FunctionalComponent } from 'react';\nimport Model, { Param } from './Model.react';\n\nconst ModelParams: Array<Param> = [\n  {\n    key: 'v_reset',\n    name: 'Reset Voltage',\n    unit: 'mV',\n    value: -60,\n    stepValue: 1,\n  },\n  {\n    key: 'v_thresh',\n    name: 'Threshold Voltage',\n    unit: 'mV',\n    value: 15,\n    stepValue: 1,\n  },\n  {\n    key: 'v_in',\n    name: 'Input Voltage',\n    unit: 'mV',\n    value: 0,\n    stepValue: 1,\n  },\n  {\n    key: 'v_in_level',\n    name: 'Input Voltage Step',\n    unit: 'mV',\n    value: 20,\n    stepValue: 1,\n  },\n  {\n    key: 'tau_m',\n    name: 'Time Constant',\n    unit: 'ms',\n    value: 10,\n    stepValue: 1,\n  },\n  {\n    key: 'v_mem',\n    name: 'Membrane Voltage',\n    unit: 'mV',\n    value: 0,\n    stepValue: 1,\n  },\n  {\n    key: 'start_time',\n    name: 'Stimulation Start Time',\n    unit: 'ms',\n    value: 20,\n    stepValue: 1,\n  },\n];\n\nconst modelStep = (\n  inputs: Map<string, number>,\n  dt: number,\n  t: number,\n): Map<string, number> => {\n  const vReset = inputs.get('v_reset');\n  const vThresh = inputs.get('v_thresh');\n  const vIn = inputs.get('v_in');\n  const vMem = inputs.get('v_mem');\n  const tauM = inputs.get('tau_m');\n\n  const dv = ((vIn - vMem) / tauM) * dt;\n  const vMemNew = vMem + dv;\n  const vMemReset = vMemNew > vThresh ? vReset : vMemNew;\n\n  if (t >= inputs.get('start_time')) {\n    inputs.set('v_in', inputs.get('v_in_level'));\n  }\n\n  inputs.set('v_mem', vMemReset);\n\n  return inputs;\n};\n\nconst LeakyIntegrateAndFire: FunctionalComponent = () => (\n  <Model\n    params={ModelParams}\n    defaultTargetParamKey=\"v_mem\"\n    model={modelStep}\n  />\n);\n\nexport default LeakyIntegrateAndFire;\n","import React, { FunctionalComponent } from 'react';\nimport Model, { Param } from './Model.react';\n\nconst ModelParams: Array<Param> = [\n  {\n    key: 'cap',\n    name: 'Membrane Capacitance',\n    unit: 'uF / cm * cm',\n    value: 20,\n    stepValue: 0.1,\n  },\n  {\n    key: 'e_k',\n    name: 'Potassium Reversal Potential',\n    unit: 'mV',\n    value: -84,\n    stepValue: 1,\n  },\n  {\n    key: 'e_ca',\n    name: 'Calcium Reversal Potential',\n    unit: 'mV',\n    value: 120,\n    stepValue: 1,\n  },\n  {\n    key: 'e_l',\n    name: 'Leak Potential',\n    unit: 'mV',\n    value: -60,\n    stepValue: 1,\n  },\n  {\n    key: 'g_k',\n    name: 'Potassium Conductance',\n    unit: 'mS / cm * cm',\n    value: 8,\n    stepValue: 0.1,\n  },\n  {\n    key: 'g_ca',\n    name: 'Calcium Conductance',\n    unit: 'mS / cm * cm',\n    value: 4,\n    stepValue: 0.1,\n  },\n  {\n    key: 'g_l',\n    name: 'Leak Conductance',\n    unit: 'mS / cm * cm',\n    value: 2,\n    stepValue: 0.1,\n  },\n  {\n    key: 'v1',\n    name: 'V1 Tuning Param',\n    unit: 'mV',\n    value: -1.2,\n    stepValue: 0.1,\n  },\n  {\n    key: 'v2',\n    name: 'V2 Tuning Param',\n    unit: 'mV',\n    value: 18,\n    stepValue: 0.1,\n  },\n  {\n    key: 'v3',\n    name: 'V3 Tuning Param',\n    unit: 'mV',\n    value: 12,\n    stepValue: 0.1,\n  },\n  {\n    key: 'v4',\n    name: 'V4 Tuning Param',\n    unit: 'mV',\n    value: 17,\n    stepValue: 0.1,\n  },\n  {\n    key: 'phi',\n    name: 'Reference Frequency',\n    unit: null,\n    value: 0.067,\n    stepValue: 0.001,\n  },\n  {\n    key: 'n',\n    name: 'n Variable',\n    unit: null,\n    value: 0.014,\n    stepValue: 0.001,\n  },\n  {\n    key: 'v_mem',\n    name: 'Membrane Voltage',\n    unit: 'mV',\n    value: 0,\n    stepValue: 1,\n  },\n  {\n    key: 'v_in',\n    name: 'Input Voltage',\n    unit: 'mV',\n    value: 0,\n    stepValue: 1,\n  },\n  {\n    key: 'v_in_level',\n    name: 'Input Voltage Step',\n    unit: 'mV',\n    value: 100,\n    stepVallue: 1,\n  },\n  {\n    key: 'start_time',\n    name: 'Stimulation Start Time',\n    unit: 'ms',\n    value: 20,\n    stepValue: 1,\n  },\n];\n\nconst modelStep = (\n  inputs: Map<string, number>,\n  dt: number,\n  t: number,\n): Map<string, number> => {\n  const cap = inputs.get('cap');\n  const eCa = inputs.get('e_ca');\n  const eK = inputs.get('e_k');\n  const eL = inputs.get('e_l');\n  const gCa = inputs.get('g_ca');\n  const gK = inputs.get('g_k');\n  const gL = inputs.get('g_l');\n  const vIn = inputs.get('v_in');\n  const vMem = inputs.get('v_mem');\n  const phi = inputs.get('phi');\n  const v1 = inputs.get('v1');\n  const v2 = inputs.get('v2');\n  const v3 = inputs.get('v3');\n  const v4 = inputs.get('v4');\n  const n = inputs.get('n');\n\n  const mss = 0.5 * (1 + Math.tanh((vMem - v1) / v2));\n  const nss = 0.5 * (1 + Math.tanh((vMem - v3) / v4));\n  const tauN = 1 / (phi * Math.cosh((vMem - v3) / (2 * v4)));\n\n  const dv = ((\n    vIn\n    - (gL * (vMem - eL))\n    - (gCa * mss * (vMem - eCa))\n    - (gK * n * (vMem - eK))\n  ) * dt / cap);\n  const dn = ((nss - n) / tauN) * dt;\n\n  inputs.set('v_mem', vMem + dv);\n  inputs.set('n', n + dn);\n\n  if (t >= inputs.get('start_time')) {\n    inputs.set('v_in', inputs.get('v_in_level'));\n  }\n\n  return inputs;\n};\n\nconst MorrisLecar: FunctionalComponent = () => (\n  <Model\n    params={ModelParams}\n    defaultTargetParamKey=\"v_mem\"\n    model={modelStep}\n  />\n);\n\nexport default MorrisLecar;\n","import React, { FunctionalComponent } from 'react';\nimport 'css/pages/Post.scss';\nimport FitzHughNagumo from 'components/posts/neuron_models/FitzHughNagumo.react';\nimport Izhikevich from 'components/posts/neuron_models/Izhikevich.react';\nimport HodgkinHuxley from 'components/posts/neuron_models/HodgkinHuxley.react';\nimport LeakyIntegrateAndFire from 'components/posts/neuron_models/LeakyIntegrateAndFire.react';\nimport MorrisLecar from 'components/posts/neuron_models/MorrisLecar.react';\n\ninterface SectionProps {\n  title: React.Node,\n  description: React.Node;\n  model: React.Node;\n}\n\nconst NeuronModelSection: FunctionalComponent<SectionProps> = (props: SectionProps) => {\n  const { title, description, model } = props;\n  return [\n    <div className=\"post-body emphasis top\" key=\"body\">\n      <h3>\n        {title}\n      </h3>\n      <div>\n        {description}\n      </div>\n    </div>,\n    <div className=\"emphasis top\" key=\"model\">\n      {model}\n    </div>,\n  ];\n};\n\nconst NeuronModels: FunctionalComponent = () => (\n  <div>\n    <div className=\"post-body\">\n      <h3>Biological Neuron Models</h3>\n      <div>\n        In the early days of neural networks, before we had tons of data and high-performing\n        GPU libraries, neural networks actually meant something roughly biological. The\n        McCulloch-Pitts neuron, which is effectively a perceptron with a binary threshold,\n        was inspired by real neurons, which get inputs from outside sources like other neurons\n        and, if the inputs are collectively large enough, output a spike. More complex models\n        were developed to better model the actual physiology, as measured through experiments,\n        which has resulted in a comprehensive library of models of varying complexity. The\n        models below are some of the more popular models used in computational neuroscience.\n      </div>\n      <h3 className=\"emphasis top\">Markov Models</h3>\n      <div>\n        The models described here are Markov models, meaning that the future state can be\n        entirely described by the current state, irrespective to past events. These models\n        use one or more state variables - the simplest state variable being the membrane\n        potential. These models are typically differential equations, and we can throw them\n        into a forward solver to solve them very simply (although more complex solvers are\n        usually better at handling numerical instability). Non-Markovian models also exist.\n      </div>\n    </div>\n    <NeuronModelSection\n      title=\"Leaky Integrate and Fire Model\"\n      description={(\n        <>\n          This is the simplest kind of neuron model. It consists of two parts:\n          <ol>\n            <li>\n              Slow leakage of ions across the membrane, which is represented as a resistor\n            </li>\n            <li>\n              Voltage difference across the membrane which triggers voltage-gated channels to\n              open when it reaches a certain threshold, which is represented as a capacitor\n            </li>\n          </ol>\n        </>\n      )}\n      model={<LeakyIntegrateAndFire />}\n    />\n    <NeuronModelSection\n      title=\"Izhikevich Model\"\n      description={(\n        <>\n          This is a simple model that reproduces spiking and bursting behavior of known\n          types of cortical neurons. A full description of this model's behavior, along\n          with new parameters you can try, can be found{' '}\n          <a href=\"https://www.izhikevich.org/publications/spikes.htm\">here</a>.\n        </>\n      )}\n      model={<Izhikevich />}\n    />\n    <NeuronModelSection\n      title=\"Hodgkin-Huxley Model\"\n      description={(\n        <>\n          This is a much more advanced kind of model, which attempts to accurately mimic\n          the biological mechanisms by explicitly modeling the ion channels on the surface\n          of the neuron. This was one of the first biological neuron models to be developed,\n          and is viewed as an accurate representation of some types of physiology. It uses\n          four variables to represent the different kinds of kinetics, instead of just\n          using the membrane potential like in other models.\n        </>\n      )}\n      model={<HodgkinHuxley />}\n    />\n    <NeuronModelSection\n      title=\"FitzHugh-Nagumo Model\"\n      description={(\n        <>\n          This model is a simplified version of the Hodgkin-Huxley model. It uses a feedback\n          loop variable to enable the model to learn more complex dynamics than the simple\n          LIF model, but it doesn't have clear biological correlates. In particular, the\n          voltage range is well outside the voltage range for typical neuron models.\n        </>\n      )}\n      model={<FitzHughNagumo />}\n    />\n    <NeuronModelSection\n      title=\"Morris-Lecar Model\"\n      description={(\n        <>\n          This model describes the relationship between calcium and potassium conductances in\n          the muscle fiber of the giant barnacle. As opposed to other models which model the\n          relationship between sodium and potassium, muscle fiber synapse potentials are typically\n          more dependent on calcium, because there are more calicum channels. This is true in other\n          animals as well. Additionally, rather than using four state variables, this model only\n          uses two.\n        </>\n      )}\n      model={<MorrisLecar />}\n    />\n  </div>\n);\n\nexport default NeuronModels;\n","import React, { FunctionalComponent } from 'react';\n\nconst Torchscript: FunctionalComponent = () => (\n  <div>\n    I will work on this blog post later.\n  </div>\n);\n\nexport default Torchscript;\n","import React from 'react';\n\n/* --------------\n * Post Renderers\n * -------------- */\nimport NeuronModels from 'posts/renderers/NeuronModels.react';\nimport Torchscript from 'posts/renderers/Torchscript.react';\n\nexport interface PostInfo {\n  title: string,\n  blurb: React.Node,\n  renderer: React.Node\n}\n\nconst PostMap: {\n  [string]: PostInfo\n} = new Map([\n  [\n    'torchscript', {\n      title: 'Torchscript 🔥 verses Caffe2 ☕',\n      blurb: (\n        <span>\n          Facebook is migrating a lot of our machine learning inference infrastructure\n          over to Torchscript, so I figured I should write an informational blog post\n          about the technical internals of each, as I understand them.\n        </span>\n      ),\n      renderer: Torchscript,\n    },\n  ],\n  [\n    'neuron_models', {\n      title: 'Neuron 🧠 Models',\n      blurb: (\n        <span>\n          An investigation of some different kinds of biological neuron models, from the\n          neuroscience world rather than the computer science world\n        </span>\n      ),\n      renderer: NeuronModels,\n    },\n  ],\n]);\n\nexport default PostMap;\n","import React, { FunctionalComponent } from 'react';\nimport { PostInfo } from 'posts/PostMap.react';\nimport 'css/pages/Post.scss';\nimport LazyLoad from 'react-lazyload';\n\ninterface Props {\n  info: PostInfo,\n}\n\nconst PostRenderer: FunctionalComponent<Props> = (props: Props) => {\n  const {\n    info: {\n      title, blurb, renderer,\n    },\n  } = props;\n  return (\n    <div className=\"emphasis all\">\n      <h1 className=\"padded bottom title\">{title}</h1>\n      <h4 className=\"emphasis bottom blurb\">{blurb}</h4>\n      <LazyLoad>\n        {renderer()}\n      </LazyLoad>\n    </div>\n  );\n};\n\nexport default PostRenderer;\n","import React, { FunctionalComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { CardColumns, Card } from 'react-bootstrap';\nimport PostMap from 'posts/PostMap.react';\nimport PostRenderer from 'posts/PostRenderer.react';\n\ninterface Props {\n  post: ?string\n}\n\nconst PostRouter: FunctionalComponent<Props> = (props: Props) => {\n  const { post } = props;\n  if (post == null || !PostMap.has(post)) {\n    return (\n      <div className=\"emphasis all\">\n        <h1 className=\"padded bottom\">\n          Posts\n        </h1>\n        <CardColumns>\n          {\n            [...PostMap.keys()].map((key) => {\n              const { title, blurb } = PostMap.get(key);\n              return (\n                <Card className=\"text-center p-3\" key={key}>\n                  <Card.Body>\n                    <Card.Title><Link to={`/posts/${key}`}>{title}</Link></Card.Title>\n                    <Card.Text>{blurb}</Card.Text>\n                  </Card.Body>\n                </Card>\n              );\n            })\n          }\n        </CardColumns>\n      </div>\n    );\n  }\n  return <PostRenderer info={PostMap.get(post)} />;\n};\n\nexport default PostRouter;\n","import React, { FunctionalComponent } from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport About from 'pages/About.react';\nimport PostRouter from 'posts/PostRouter.react';\n\nimport 'css/App.scss';\n\nconst App: FunctionalComponent = () => (\n  <div className=\"App\">\n    <header>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse>\n          <Nav>\n            <Nav.Link href=\"#/\">Home</Nav.Link>\n            <Nav.Link href=\"#posts\">Posts</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </header>\n    <HashRouter>\n      <Route exact path=\"/\" component={About} />\n      <Route\n        path=\"/posts\"\n        component={({\n          match: {\n            url,\n          },\n        }) => (\n          <HashRouter>\n            <Route exact path={`${url}`} component={PostRouter} />\n            <Route\n              path={`${url}/:post`}\n              component={({\n                match: {\n                  params: {\n                    post,\n                  },\n                },\n              }) => <PostRouter post={post} />}\n            />\n          </HashRouter>\n        )}\n      />\n    </HashRouter>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.react';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}